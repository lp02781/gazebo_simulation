# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from keyboard/Keyboard.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Keyboard(genpy.Message):
  _md5sum = "b60a24a70bde597cbf13b12c86ab9705"
  _type = "keyboard/Keyboard"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint8 K_i
uint8 K_h
uint8 K_y
uint8 K_z
uint8 K_q
uint8 K_p
uint8 K_s
uint8 K_n
uint8 K_t
uint8 K_w
uint8 K_v
uint8 K_a
uint8 K_k
uint8 K_j
uint8 K_m
uint8 K_l
uint8 K_o
uint8 K_c
uint8 K_b
uint8 K_e
uint8 K_d
uint8 K_g
uint8 K_f
uint8 K_r
uint8 K_x
uint8 K_u

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','K_i','K_h','K_y','K_z','K_q','K_p','K_s','K_n','K_t','K_w','K_v','K_a','K_k','K_j','K_m','K_l','K_o','K_c','K_b','K_e','K_d','K_g','K_f','K_r','K_x','K_u']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,K_i,K_h,K_y,K_z,K_q,K_p,K_s,K_n,K_t,K_w,K_v,K_a,K_k,K_j,K_m,K_l,K_o,K_c,K_b,K_e,K_d,K_g,K_f,K_r,K_x,K_u

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Keyboard, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.K_i is None:
        self.K_i = 0
      if self.K_h is None:
        self.K_h = 0
      if self.K_y is None:
        self.K_y = 0
      if self.K_z is None:
        self.K_z = 0
      if self.K_q is None:
        self.K_q = 0
      if self.K_p is None:
        self.K_p = 0
      if self.K_s is None:
        self.K_s = 0
      if self.K_n is None:
        self.K_n = 0
      if self.K_t is None:
        self.K_t = 0
      if self.K_w is None:
        self.K_w = 0
      if self.K_v is None:
        self.K_v = 0
      if self.K_a is None:
        self.K_a = 0
      if self.K_k is None:
        self.K_k = 0
      if self.K_j is None:
        self.K_j = 0
      if self.K_m is None:
        self.K_m = 0
      if self.K_l is None:
        self.K_l = 0
      if self.K_o is None:
        self.K_o = 0
      if self.K_c is None:
        self.K_c = 0
      if self.K_b is None:
        self.K_b = 0
      if self.K_e is None:
        self.K_e = 0
      if self.K_d is None:
        self.K_d = 0
      if self.K_g is None:
        self.K_g = 0
      if self.K_f is None:
        self.K_f = 0
      if self.K_r is None:
        self.K_r = 0
      if self.K_x is None:
        self.K_x = 0
      if self.K_u is None:
        self.K_u = 0
    else:
      self.header = std_msgs.msg.Header()
      self.K_i = 0
      self.K_h = 0
      self.K_y = 0
      self.K_z = 0
      self.K_q = 0
      self.K_p = 0
      self.K_s = 0
      self.K_n = 0
      self.K_t = 0
      self.K_w = 0
      self.K_v = 0
      self.K_a = 0
      self.K_k = 0
      self.K_j = 0
      self.K_m = 0
      self.K_l = 0
      self.K_o = 0
      self.K_c = 0
      self.K_b = 0
      self.K_e = 0
      self.K_d = 0
      self.K_g = 0
      self.K_f = 0
      self.K_r = 0
      self.K_x = 0
      self.K_u = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_26B().pack(_x.K_i, _x.K_h, _x.K_y, _x.K_z, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_t, _x.K_w, _x.K_v, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_r, _x.K_x, _x.K_u))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.K_i, _x.K_h, _x.K_y, _x.K_z, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_t, _x.K_w, _x.K_v, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_r, _x.K_x, _x.K_u,) = _get_struct_26B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_26B().pack(_x.K_i, _x.K_h, _x.K_y, _x.K_z, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_t, _x.K_w, _x.K_v, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_r, _x.K_x, _x.K_u))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.K_i, _x.K_h, _x.K_y, _x.K_z, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_t, _x.K_w, _x.K_v, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_r, _x.K_x, _x.K_u,) = _get_struct_26B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26B = None
def _get_struct_26B():
    global _struct_26B
    if _struct_26B is None:
        _struct_26B = struct.Struct("<26B")
    return _struct_26B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
