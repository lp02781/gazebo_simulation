# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from keyboard/Keyboard.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Keyboard(genpy.Message):
  _md5sum = "2159f4484383d5870ec5060160b0487a"
  _type = "keyboard/Keyboard"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint8 K_KP_MINUS
uint8 K_F1
uint8 K_F2
uint8 K_F3
uint8 K_COLON
uint8 K_F5
uint8 K_F6
uint8 K_F7
uint8 K_F8
uint8 K_F9
uint8 K_LEFT
uint8 K_COMMA
uint8 K_RIGHT
uint8 K_PAUSE
uint8 K_EQUALS
uint8 K_SYSREQ
uint8 K_F4
uint8 K_SEMICOLON
uint8 K_AMPERSAND
uint8 K_NUMLOCK
uint8 K_CLEAR
uint8 K_UNKNOWN
uint8 K_KP_PLUS
uint8 K_QUESTION
uint8 K_KP_EQUALS
uint8 K_RMETA
uint8 K_EURO
uint8 K_SCROLLOCK
uint8 K_PERIOD
uint8 K_SPACE
uint8 K_INSERT
uint8 K_DELETE
uint8 K_CARET
uint8 K_HOME
uint8 K_i
uint8 K_LSUPER
uint8 K_GREATER
uint8 K_LMETA
uint8 K_TAB
uint8 K_FIRST
uint8 K_KP_PERIOD
uint8 K_RALT
uint8 K_BREAK
uint8 K_MODE
uint8 K_h
uint8 K_RIGHTBRACKET
uint8 K_RSHIFT
uint8 K_LSHIFT
uint8 K_F12
uint8 K_F13
uint8 K_F10
uint8 K_F11
uint8 K_LAST
uint8 K_F14
uint8 K_F15
uint8 K_y
uint8 K_DOLLAR
uint8 K_z
uint8 K_KP_ENTER
uint8 K_PAGEDOWN
uint8 K_q
uint8 K_p
uint8 K_s
uint8 K_n
uint8 K_HASH
uint8 K_t
uint8 K_w
uint8 K_v
uint8 K_DOWN
uint8 K_a
uint8 K_k
uint8 K_j
uint8 K_m
uint8 K_l
uint8 K_o
uint8 K_UP
uint8 K_END
uint8 K_RSUPER
uint8 K_c
uint8 K_b
uint8 K_e
uint8 K_d
uint8 K_g
uint8 K_f
uint8 K_ASTERISK
uint8 K_AT
uint8 K_PAGEUP
uint8 K_CAPSLOCK
uint8 K_LESS
uint8 K_PRINT
uint8 K_SLASH
uint8 K_LCTRL
uint8 K_BACKSLASH
uint8 K_RETURN
uint8 K_MINUS
uint8 K_HELP
uint8 K_r
uint8 K_9
uint8 K_8
uint8 K_EXCLAIM
uint8 K_x
uint8 K_1
uint8 K_0
uint8 K_3
uint8 K_2
uint8 K_5
uint8 K_4
uint8 K_7
uint8 K_6
uint8 K_LEFTPAREN
uint8 K_KP_DIVIDE
uint8 K_POWER
uint8 K_ESCAPE
uint8 K_BACKSPACE
uint8 K_MENU
uint8 K_u
uint8 K_PLUS
uint8 K_KP6
uint8 K_UNDERSCORE
uint8 K_QUOTE
uint8 K_RIGHTPAREN
uint8 K_RCTRL
uint8 K_QUOTEDBL
uint8 K_KP_MULTIPLY
uint8 K_LEFTBRACKET
uint8 K_LALT
uint8 K_KP8
uint8 K_KP9
uint8 K_KP4
uint8 K_KP5
uint8 K_BACKQUOTE
uint8 K_KP7
uint8 K_KP0
uint8 K_KP1
uint8 K_KP2
uint8 K_KP3
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','K_KP_MINUS','K_F1','K_F2','K_F3','K_COLON','K_F5','K_F6','K_F7','K_F8','K_F9','K_LEFT','K_COMMA','K_RIGHT','K_PAUSE','K_EQUALS','K_SYSREQ','K_F4','K_SEMICOLON','K_AMPERSAND','K_NUMLOCK','K_CLEAR','K_UNKNOWN','K_KP_PLUS','K_QUESTION','K_KP_EQUALS','K_RMETA','K_EURO','K_SCROLLOCK','K_PERIOD','K_SPACE','K_INSERT','K_DELETE','K_CARET','K_HOME','K_i','K_LSUPER','K_GREATER','K_LMETA','K_TAB','K_FIRST','K_KP_PERIOD','K_RALT','K_BREAK','K_MODE','K_h','K_RIGHTBRACKET','K_RSHIFT','K_LSHIFT','K_F12','K_F13','K_F10','K_F11','K_LAST','K_F14','K_F15','K_y','K_DOLLAR','K_z','K_KP_ENTER','K_PAGEDOWN','K_q','K_p','K_s','K_n','K_HASH','K_t','K_w','K_v','K_DOWN','K_a','K_k','K_j','K_m','K_l','K_o','K_UP','K_END','K_RSUPER','K_c','K_b','K_e','K_d','K_g','K_f','K_ASTERISK','K_AT','K_PAGEUP','K_CAPSLOCK','K_LESS','K_PRINT','K_SLASH','K_LCTRL','K_BACKSLASH','K_RETURN','K_MINUS','K_HELP','K_r','K_9','K_8','K_EXCLAIM','K_x','K_1','K_0','K_3','K_2','K_5','K_4','K_7','K_6','K_LEFTPAREN','K_KP_DIVIDE','K_POWER','K_ESCAPE','K_BACKSPACE','K_MENU','K_u','K_PLUS','K_KP6','K_UNDERSCORE','K_QUOTE','K_RIGHTPAREN','K_RCTRL','K_QUOTEDBL','K_KP_MULTIPLY','K_LEFTBRACKET','K_LALT','K_KP8','K_KP9','K_KP4','K_KP5','K_BACKQUOTE','K_KP7','K_KP0','K_KP1','K_KP2','K_KP3']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,K_KP_MINUS,K_F1,K_F2,K_F3,K_COLON,K_F5,K_F6,K_F7,K_F8,K_F9,K_LEFT,K_COMMA,K_RIGHT,K_PAUSE,K_EQUALS,K_SYSREQ,K_F4,K_SEMICOLON,K_AMPERSAND,K_NUMLOCK,K_CLEAR,K_UNKNOWN,K_KP_PLUS,K_QUESTION,K_KP_EQUALS,K_RMETA,K_EURO,K_SCROLLOCK,K_PERIOD,K_SPACE,K_INSERT,K_DELETE,K_CARET,K_HOME,K_i,K_LSUPER,K_GREATER,K_LMETA,K_TAB,K_FIRST,K_KP_PERIOD,K_RALT,K_BREAK,K_MODE,K_h,K_RIGHTBRACKET,K_RSHIFT,K_LSHIFT,K_F12,K_F13,K_F10,K_F11,K_LAST,K_F14,K_F15,K_y,K_DOLLAR,K_z,K_KP_ENTER,K_PAGEDOWN,K_q,K_p,K_s,K_n,K_HASH,K_t,K_w,K_v,K_DOWN,K_a,K_k,K_j,K_m,K_l,K_o,K_UP,K_END,K_RSUPER,K_c,K_b,K_e,K_d,K_g,K_f,K_ASTERISK,K_AT,K_PAGEUP,K_CAPSLOCK,K_LESS,K_PRINT,K_SLASH,K_LCTRL,K_BACKSLASH,K_RETURN,K_MINUS,K_HELP,K_r,K_9,K_8,K_EXCLAIM,K_x,K_1,K_0,K_3,K_2,K_5,K_4,K_7,K_6,K_LEFTPAREN,K_KP_DIVIDE,K_POWER,K_ESCAPE,K_BACKSPACE,K_MENU,K_u,K_PLUS,K_KP6,K_UNDERSCORE,K_QUOTE,K_RIGHTPAREN,K_RCTRL,K_QUOTEDBL,K_KP_MULTIPLY,K_LEFTBRACKET,K_LALT,K_KP8,K_KP9,K_KP4,K_KP5,K_BACKQUOTE,K_KP7,K_KP0,K_KP1,K_KP2,K_KP3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Keyboard, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.K_KP_MINUS is None:
        self.K_KP_MINUS = 0
      if self.K_F1 is None:
        self.K_F1 = 0
      if self.K_F2 is None:
        self.K_F2 = 0
      if self.K_F3 is None:
        self.K_F3 = 0
      if self.K_COLON is None:
        self.K_COLON = 0
      if self.K_F5 is None:
        self.K_F5 = 0
      if self.K_F6 is None:
        self.K_F6 = 0
      if self.K_F7 is None:
        self.K_F7 = 0
      if self.K_F8 is None:
        self.K_F8 = 0
      if self.K_F9 is None:
        self.K_F9 = 0
      if self.K_LEFT is None:
        self.K_LEFT = 0
      if self.K_COMMA is None:
        self.K_COMMA = 0
      if self.K_RIGHT is None:
        self.K_RIGHT = 0
      if self.K_PAUSE is None:
        self.K_PAUSE = 0
      if self.K_EQUALS is None:
        self.K_EQUALS = 0
      if self.K_SYSREQ is None:
        self.K_SYSREQ = 0
      if self.K_F4 is None:
        self.K_F4 = 0
      if self.K_SEMICOLON is None:
        self.K_SEMICOLON = 0
      if self.K_AMPERSAND is None:
        self.K_AMPERSAND = 0
      if self.K_NUMLOCK is None:
        self.K_NUMLOCK = 0
      if self.K_CLEAR is None:
        self.K_CLEAR = 0
      if self.K_UNKNOWN is None:
        self.K_UNKNOWN = 0
      if self.K_KP_PLUS is None:
        self.K_KP_PLUS = 0
      if self.K_QUESTION is None:
        self.K_QUESTION = 0
      if self.K_KP_EQUALS is None:
        self.K_KP_EQUALS = 0
      if self.K_RMETA is None:
        self.K_RMETA = 0
      if self.K_EURO is None:
        self.K_EURO = 0
      if self.K_SCROLLOCK is None:
        self.K_SCROLLOCK = 0
      if self.K_PERIOD is None:
        self.K_PERIOD = 0
      if self.K_SPACE is None:
        self.K_SPACE = 0
      if self.K_INSERT is None:
        self.K_INSERT = 0
      if self.K_DELETE is None:
        self.K_DELETE = 0
      if self.K_CARET is None:
        self.K_CARET = 0
      if self.K_HOME is None:
        self.K_HOME = 0
      if self.K_i is None:
        self.K_i = 0
      if self.K_LSUPER is None:
        self.K_LSUPER = 0
      if self.K_GREATER is None:
        self.K_GREATER = 0
      if self.K_LMETA is None:
        self.K_LMETA = 0
      if self.K_TAB is None:
        self.K_TAB = 0
      if self.K_FIRST is None:
        self.K_FIRST = 0
      if self.K_KP_PERIOD is None:
        self.K_KP_PERIOD = 0
      if self.K_RALT is None:
        self.K_RALT = 0
      if self.K_BREAK is None:
        self.K_BREAK = 0
      if self.K_MODE is None:
        self.K_MODE = 0
      if self.K_h is None:
        self.K_h = 0
      if self.K_RIGHTBRACKET is None:
        self.K_RIGHTBRACKET = 0
      if self.K_RSHIFT is None:
        self.K_RSHIFT = 0
      if self.K_LSHIFT is None:
        self.K_LSHIFT = 0
      if self.K_F12 is None:
        self.K_F12 = 0
      if self.K_F13 is None:
        self.K_F13 = 0
      if self.K_F10 is None:
        self.K_F10 = 0
      if self.K_F11 is None:
        self.K_F11 = 0
      if self.K_LAST is None:
        self.K_LAST = 0
      if self.K_F14 is None:
        self.K_F14 = 0
      if self.K_F15 is None:
        self.K_F15 = 0
      if self.K_y is None:
        self.K_y = 0
      if self.K_DOLLAR is None:
        self.K_DOLLAR = 0
      if self.K_z is None:
        self.K_z = 0
      if self.K_KP_ENTER is None:
        self.K_KP_ENTER = 0
      if self.K_PAGEDOWN is None:
        self.K_PAGEDOWN = 0
      if self.K_q is None:
        self.K_q = 0
      if self.K_p is None:
        self.K_p = 0
      if self.K_s is None:
        self.K_s = 0
      if self.K_n is None:
        self.K_n = 0
      if self.K_HASH is None:
        self.K_HASH = 0
      if self.K_t is None:
        self.K_t = 0
      if self.K_w is None:
        self.K_w = 0
      if self.K_v is None:
        self.K_v = 0
      if self.K_DOWN is None:
        self.K_DOWN = 0
      if self.K_a is None:
        self.K_a = 0
      if self.K_k is None:
        self.K_k = 0
      if self.K_j is None:
        self.K_j = 0
      if self.K_m is None:
        self.K_m = 0
      if self.K_l is None:
        self.K_l = 0
      if self.K_o is None:
        self.K_o = 0
      if self.K_UP is None:
        self.K_UP = 0
      if self.K_END is None:
        self.K_END = 0
      if self.K_RSUPER is None:
        self.K_RSUPER = 0
      if self.K_c is None:
        self.K_c = 0
      if self.K_b is None:
        self.K_b = 0
      if self.K_e is None:
        self.K_e = 0
      if self.K_d is None:
        self.K_d = 0
      if self.K_g is None:
        self.K_g = 0
      if self.K_f is None:
        self.K_f = 0
      if self.K_ASTERISK is None:
        self.K_ASTERISK = 0
      if self.K_AT is None:
        self.K_AT = 0
      if self.K_PAGEUP is None:
        self.K_PAGEUP = 0
      if self.K_CAPSLOCK is None:
        self.K_CAPSLOCK = 0
      if self.K_LESS is None:
        self.K_LESS = 0
      if self.K_PRINT is None:
        self.K_PRINT = 0
      if self.K_SLASH is None:
        self.K_SLASH = 0
      if self.K_LCTRL is None:
        self.K_LCTRL = 0
      if self.K_BACKSLASH is None:
        self.K_BACKSLASH = 0
      if self.K_RETURN is None:
        self.K_RETURN = 0
      if self.K_MINUS is None:
        self.K_MINUS = 0
      if self.K_HELP is None:
        self.K_HELP = 0
      if self.K_r is None:
        self.K_r = 0
      if self.K_9 is None:
        self.K_9 = 0
      if self.K_8 is None:
        self.K_8 = 0
      if self.K_EXCLAIM is None:
        self.K_EXCLAIM = 0
      if self.K_x is None:
        self.K_x = 0
      if self.K_1 is None:
        self.K_1 = 0
      if self.K_0 is None:
        self.K_0 = 0
      if self.K_3 is None:
        self.K_3 = 0
      if self.K_2 is None:
        self.K_2 = 0
      if self.K_5 is None:
        self.K_5 = 0
      if self.K_4 is None:
        self.K_4 = 0
      if self.K_7 is None:
        self.K_7 = 0
      if self.K_6 is None:
        self.K_6 = 0
      if self.K_LEFTPAREN is None:
        self.K_LEFTPAREN = 0
      if self.K_KP_DIVIDE is None:
        self.K_KP_DIVIDE = 0
      if self.K_POWER is None:
        self.K_POWER = 0
      if self.K_ESCAPE is None:
        self.K_ESCAPE = 0
      if self.K_BACKSPACE is None:
        self.K_BACKSPACE = 0
      if self.K_MENU is None:
        self.K_MENU = 0
      if self.K_u is None:
        self.K_u = 0
      if self.K_PLUS is None:
        self.K_PLUS = 0
      if self.K_KP6 is None:
        self.K_KP6 = 0
      if self.K_UNDERSCORE is None:
        self.K_UNDERSCORE = 0
      if self.K_QUOTE is None:
        self.K_QUOTE = 0
      if self.K_RIGHTPAREN is None:
        self.K_RIGHTPAREN = 0
      if self.K_RCTRL is None:
        self.K_RCTRL = 0
      if self.K_QUOTEDBL is None:
        self.K_QUOTEDBL = 0
      if self.K_KP_MULTIPLY is None:
        self.K_KP_MULTIPLY = 0
      if self.K_LEFTBRACKET is None:
        self.K_LEFTBRACKET = 0
      if self.K_LALT is None:
        self.K_LALT = 0
      if self.K_KP8 is None:
        self.K_KP8 = 0
      if self.K_KP9 is None:
        self.K_KP9 = 0
      if self.K_KP4 is None:
        self.K_KP4 = 0
      if self.K_KP5 is None:
        self.K_KP5 = 0
      if self.K_BACKQUOTE is None:
        self.K_BACKQUOTE = 0
      if self.K_KP7 is None:
        self.K_KP7 = 0
      if self.K_KP0 is None:
        self.K_KP0 = 0
      if self.K_KP1 is None:
        self.K_KP1 = 0
      if self.K_KP2 is None:
        self.K_KP2 = 0
      if self.K_KP3 is None:
        self.K_KP3 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.K_KP_MINUS = 0
      self.K_F1 = 0
      self.K_F2 = 0
      self.K_F3 = 0
      self.K_COLON = 0
      self.K_F5 = 0
      self.K_F6 = 0
      self.K_F7 = 0
      self.K_F8 = 0
      self.K_F9 = 0
      self.K_LEFT = 0
      self.K_COMMA = 0
      self.K_RIGHT = 0
      self.K_PAUSE = 0
      self.K_EQUALS = 0
      self.K_SYSREQ = 0
      self.K_F4 = 0
      self.K_SEMICOLON = 0
      self.K_AMPERSAND = 0
      self.K_NUMLOCK = 0
      self.K_CLEAR = 0
      self.K_UNKNOWN = 0
      self.K_KP_PLUS = 0
      self.K_QUESTION = 0
      self.K_KP_EQUALS = 0
      self.K_RMETA = 0
      self.K_EURO = 0
      self.K_SCROLLOCK = 0
      self.K_PERIOD = 0
      self.K_SPACE = 0
      self.K_INSERT = 0
      self.K_DELETE = 0
      self.K_CARET = 0
      self.K_HOME = 0
      self.K_i = 0
      self.K_LSUPER = 0
      self.K_GREATER = 0
      self.K_LMETA = 0
      self.K_TAB = 0
      self.K_FIRST = 0
      self.K_KP_PERIOD = 0
      self.K_RALT = 0
      self.K_BREAK = 0
      self.K_MODE = 0
      self.K_h = 0
      self.K_RIGHTBRACKET = 0
      self.K_RSHIFT = 0
      self.K_LSHIFT = 0
      self.K_F12 = 0
      self.K_F13 = 0
      self.K_F10 = 0
      self.K_F11 = 0
      self.K_LAST = 0
      self.K_F14 = 0
      self.K_F15 = 0
      self.K_y = 0
      self.K_DOLLAR = 0
      self.K_z = 0
      self.K_KP_ENTER = 0
      self.K_PAGEDOWN = 0
      self.K_q = 0
      self.K_p = 0
      self.K_s = 0
      self.K_n = 0
      self.K_HASH = 0
      self.K_t = 0
      self.K_w = 0
      self.K_v = 0
      self.K_DOWN = 0
      self.K_a = 0
      self.K_k = 0
      self.K_j = 0
      self.K_m = 0
      self.K_l = 0
      self.K_o = 0
      self.K_UP = 0
      self.K_END = 0
      self.K_RSUPER = 0
      self.K_c = 0
      self.K_b = 0
      self.K_e = 0
      self.K_d = 0
      self.K_g = 0
      self.K_f = 0
      self.K_ASTERISK = 0
      self.K_AT = 0
      self.K_PAGEUP = 0
      self.K_CAPSLOCK = 0
      self.K_LESS = 0
      self.K_PRINT = 0
      self.K_SLASH = 0
      self.K_LCTRL = 0
      self.K_BACKSLASH = 0
      self.K_RETURN = 0
      self.K_MINUS = 0
      self.K_HELP = 0
      self.K_r = 0
      self.K_9 = 0
      self.K_8 = 0
      self.K_EXCLAIM = 0
      self.K_x = 0
      self.K_1 = 0
      self.K_0 = 0
      self.K_3 = 0
      self.K_2 = 0
      self.K_5 = 0
      self.K_4 = 0
      self.K_7 = 0
      self.K_6 = 0
      self.K_LEFTPAREN = 0
      self.K_KP_DIVIDE = 0
      self.K_POWER = 0
      self.K_ESCAPE = 0
      self.K_BACKSPACE = 0
      self.K_MENU = 0
      self.K_u = 0
      self.K_PLUS = 0
      self.K_KP6 = 0
      self.K_UNDERSCORE = 0
      self.K_QUOTE = 0
      self.K_RIGHTPAREN = 0
      self.K_RCTRL = 0
      self.K_QUOTEDBL = 0
      self.K_KP_MULTIPLY = 0
      self.K_LEFTBRACKET = 0
      self.K_LALT = 0
      self.K_KP8 = 0
      self.K_KP9 = 0
      self.K_KP4 = 0
      self.K_KP5 = 0
      self.K_BACKQUOTE = 0
      self.K_KP7 = 0
      self.K_KP0 = 0
      self.K_KP1 = 0
      self.K_KP2 = 0
      self.K_KP3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_136B().pack(_x.K_KP_MINUS, _x.K_F1, _x.K_F2, _x.K_F3, _x.K_COLON, _x.K_F5, _x.K_F6, _x.K_F7, _x.K_F8, _x.K_F9, _x.K_LEFT, _x.K_COMMA, _x.K_RIGHT, _x.K_PAUSE, _x.K_EQUALS, _x.K_SYSREQ, _x.K_F4, _x.K_SEMICOLON, _x.K_AMPERSAND, _x.K_NUMLOCK, _x.K_CLEAR, _x.K_UNKNOWN, _x.K_KP_PLUS, _x.K_QUESTION, _x.K_KP_EQUALS, _x.K_RMETA, _x.K_EURO, _x.K_SCROLLOCK, _x.K_PERIOD, _x.K_SPACE, _x.K_INSERT, _x.K_DELETE, _x.K_CARET, _x.K_HOME, _x.K_i, _x.K_LSUPER, _x.K_GREATER, _x.K_LMETA, _x.K_TAB, _x.K_FIRST, _x.K_KP_PERIOD, _x.K_RALT, _x.K_BREAK, _x.K_MODE, _x.K_h, _x.K_RIGHTBRACKET, _x.K_RSHIFT, _x.K_LSHIFT, _x.K_F12, _x.K_F13, _x.K_F10, _x.K_F11, _x.K_LAST, _x.K_F14, _x.K_F15, _x.K_y, _x.K_DOLLAR, _x.K_z, _x.K_KP_ENTER, _x.K_PAGEDOWN, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_HASH, _x.K_t, _x.K_w, _x.K_v, _x.K_DOWN, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_UP, _x.K_END, _x.K_RSUPER, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_ASTERISK, _x.K_AT, _x.K_PAGEUP, _x.K_CAPSLOCK, _x.K_LESS, _x.K_PRINT, _x.K_SLASH, _x.K_LCTRL, _x.K_BACKSLASH, _x.K_RETURN, _x.K_MINUS, _x.K_HELP, _x.K_r, _x.K_9, _x.K_8, _x.K_EXCLAIM, _x.K_x, _x.K_1, _x.K_0, _x.K_3, _x.K_2, _x.K_5, _x.K_4, _x.K_7, _x.K_6, _x.K_LEFTPAREN, _x.K_KP_DIVIDE, _x.K_POWER, _x.K_ESCAPE, _x.K_BACKSPACE, _x.K_MENU, _x.K_u, _x.K_PLUS, _x.K_KP6, _x.K_UNDERSCORE, _x.K_QUOTE, _x.K_RIGHTPAREN, _x.K_RCTRL, _x.K_QUOTEDBL, _x.K_KP_MULTIPLY, _x.K_LEFTBRACKET, _x.K_LALT, _x.K_KP8, _x.K_KP9, _x.K_KP4, _x.K_KP5, _x.K_BACKQUOTE, _x.K_KP7, _x.K_KP0, _x.K_KP1, _x.K_KP2, _x.K_KP3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.K_KP_MINUS, _x.K_F1, _x.K_F2, _x.K_F3, _x.K_COLON, _x.K_F5, _x.K_F6, _x.K_F7, _x.K_F8, _x.K_F9, _x.K_LEFT, _x.K_COMMA, _x.K_RIGHT, _x.K_PAUSE, _x.K_EQUALS, _x.K_SYSREQ, _x.K_F4, _x.K_SEMICOLON, _x.K_AMPERSAND, _x.K_NUMLOCK, _x.K_CLEAR, _x.K_UNKNOWN, _x.K_KP_PLUS, _x.K_QUESTION, _x.K_KP_EQUALS, _x.K_RMETA, _x.K_EURO, _x.K_SCROLLOCK, _x.K_PERIOD, _x.K_SPACE, _x.K_INSERT, _x.K_DELETE, _x.K_CARET, _x.K_HOME, _x.K_i, _x.K_LSUPER, _x.K_GREATER, _x.K_LMETA, _x.K_TAB, _x.K_FIRST, _x.K_KP_PERIOD, _x.K_RALT, _x.K_BREAK, _x.K_MODE, _x.K_h, _x.K_RIGHTBRACKET, _x.K_RSHIFT, _x.K_LSHIFT, _x.K_F12, _x.K_F13, _x.K_F10, _x.K_F11, _x.K_LAST, _x.K_F14, _x.K_F15, _x.K_y, _x.K_DOLLAR, _x.K_z, _x.K_KP_ENTER, _x.K_PAGEDOWN, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_HASH, _x.K_t, _x.K_w, _x.K_v, _x.K_DOWN, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_UP, _x.K_END, _x.K_RSUPER, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_ASTERISK, _x.K_AT, _x.K_PAGEUP, _x.K_CAPSLOCK, _x.K_LESS, _x.K_PRINT, _x.K_SLASH, _x.K_LCTRL, _x.K_BACKSLASH, _x.K_RETURN, _x.K_MINUS, _x.K_HELP, _x.K_r, _x.K_9, _x.K_8, _x.K_EXCLAIM, _x.K_x, _x.K_1, _x.K_0, _x.K_3, _x.K_2, _x.K_5, _x.K_4, _x.K_7, _x.K_6, _x.K_LEFTPAREN, _x.K_KP_DIVIDE, _x.K_POWER, _x.K_ESCAPE, _x.K_BACKSPACE, _x.K_MENU, _x.K_u, _x.K_PLUS, _x.K_KP6, _x.K_UNDERSCORE, _x.K_QUOTE, _x.K_RIGHTPAREN, _x.K_RCTRL, _x.K_QUOTEDBL, _x.K_KP_MULTIPLY, _x.K_LEFTBRACKET, _x.K_LALT, _x.K_KP8, _x.K_KP9, _x.K_KP4, _x.K_KP5, _x.K_BACKQUOTE, _x.K_KP7, _x.K_KP0, _x.K_KP1, _x.K_KP2, _x.K_KP3,) = _get_struct_136B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_136B().pack(_x.K_KP_MINUS, _x.K_F1, _x.K_F2, _x.K_F3, _x.K_COLON, _x.K_F5, _x.K_F6, _x.K_F7, _x.K_F8, _x.K_F9, _x.K_LEFT, _x.K_COMMA, _x.K_RIGHT, _x.K_PAUSE, _x.K_EQUALS, _x.K_SYSREQ, _x.K_F4, _x.K_SEMICOLON, _x.K_AMPERSAND, _x.K_NUMLOCK, _x.K_CLEAR, _x.K_UNKNOWN, _x.K_KP_PLUS, _x.K_QUESTION, _x.K_KP_EQUALS, _x.K_RMETA, _x.K_EURO, _x.K_SCROLLOCK, _x.K_PERIOD, _x.K_SPACE, _x.K_INSERT, _x.K_DELETE, _x.K_CARET, _x.K_HOME, _x.K_i, _x.K_LSUPER, _x.K_GREATER, _x.K_LMETA, _x.K_TAB, _x.K_FIRST, _x.K_KP_PERIOD, _x.K_RALT, _x.K_BREAK, _x.K_MODE, _x.K_h, _x.K_RIGHTBRACKET, _x.K_RSHIFT, _x.K_LSHIFT, _x.K_F12, _x.K_F13, _x.K_F10, _x.K_F11, _x.K_LAST, _x.K_F14, _x.K_F15, _x.K_y, _x.K_DOLLAR, _x.K_z, _x.K_KP_ENTER, _x.K_PAGEDOWN, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_HASH, _x.K_t, _x.K_w, _x.K_v, _x.K_DOWN, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_UP, _x.K_END, _x.K_RSUPER, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_ASTERISK, _x.K_AT, _x.K_PAGEUP, _x.K_CAPSLOCK, _x.K_LESS, _x.K_PRINT, _x.K_SLASH, _x.K_LCTRL, _x.K_BACKSLASH, _x.K_RETURN, _x.K_MINUS, _x.K_HELP, _x.K_r, _x.K_9, _x.K_8, _x.K_EXCLAIM, _x.K_x, _x.K_1, _x.K_0, _x.K_3, _x.K_2, _x.K_5, _x.K_4, _x.K_7, _x.K_6, _x.K_LEFTPAREN, _x.K_KP_DIVIDE, _x.K_POWER, _x.K_ESCAPE, _x.K_BACKSPACE, _x.K_MENU, _x.K_u, _x.K_PLUS, _x.K_KP6, _x.K_UNDERSCORE, _x.K_QUOTE, _x.K_RIGHTPAREN, _x.K_RCTRL, _x.K_QUOTEDBL, _x.K_KP_MULTIPLY, _x.K_LEFTBRACKET, _x.K_LALT, _x.K_KP8, _x.K_KP9, _x.K_KP4, _x.K_KP5, _x.K_BACKQUOTE, _x.K_KP7, _x.K_KP0, _x.K_KP1, _x.K_KP2, _x.K_KP3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.K_KP_MINUS, _x.K_F1, _x.K_F2, _x.K_F3, _x.K_COLON, _x.K_F5, _x.K_F6, _x.K_F7, _x.K_F8, _x.K_F9, _x.K_LEFT, _x.K_COMMA, _x.K_RIGHT, _x.K_PAUSE, _x.K_EQUALS, _x.K_SYSREQ, _x.K_F4, _x.K_SEMICOLON, _x.K_AMPERSAND, _x.K_NUMLOCK, _x.K_CLEAR, _x.K_UNKNOWN, _x.K_KP_PLUS, _x.K_QUESTION, _x.K_KP_EQUALS, _x.K_RMETA, _x.K_EURO, _x.K_SCROLLOCK, _x.K_PERIOD, _x.K_SPACE, _x.K_INSERT, _x.K_DELETE, _x.K_CARET, _x.K_HOME, _x.K_i, _x.K_LSUPER, _x.K_GREATER, _x.K_LMETA, _x.K_TAB, _x.K_FIRST, _x.K_KP_PERIOD, _x.K_RALT, _x.K_BREAK, _x.K_MODE, _x.K_h, _x.K_RIGHTBRACKET, _x.K_RSHIFT, _x.K_LSHIFT, _x.K_F12, _x.K_F13, _x.K_F10, _x.K_F11, _x.K_LAST, _x.K_F14, _x.K_F15, _x.K_y, _x.K_DOLLAR, _x.K_z, _x.K_KP_ENTER, _x.K_PAGEDOWN, _x.K_q, _x.K_p, _x.K_s, _x.K_n, _x.K_HASH, _x.K_t, _x.K_w, _x.K_v, _x.K_DOWN, _x.K_a, _x.K_k, _x.K_j, _x.K_m, _x.K_l, _x.K_o, _x.K_UP, _x.K_END, _x.K_RSUPER, _x.K_c, _x.K_b, _x.K_e, _x.K_d, _x.K_g, _x.K_f, _x.K_ASTERISK, _x.K_AT, _x.K_PAGEUP, _x.K_CAPSLOCK, _x.K_LESS, _x.K_PRINT, _x.K_SLASH, _x.K_LCTRL, _x.K_BACKSLASH, _x.K_RETURN, _x.K_MINUS, _x.K_HELP, _x.K_r, _x.K_9, _x.K_8, _x.K_EXCLAIM, _x.K_x, _x.K_1, _x.K_0, _x.K_3, _x.K_2, _x.K_5, _x.K_4, _x.K_7, _x.K_6, _x.K_LEFTPAREN, _x.K_KP_DIVIDE, _x.K_POWER, _x.K_ESCAPE, _x.K_BACKSPACE, _x.K_MENU, _x.K_u, _x.K_PLUS, _x.K_KP6, _x.K_UNDERSCORE, _x.K_QUOTE, _x.K_RIGHTPAREN, _x.K_RCTRL, _x.K_QUOTEDBL, _x.K_KP_MULTIPLY, _x.K_LEFTBRACKET, _x.K_LALT, _x.K_KP8, _x.K_KP9, _x.K_KP4, _x.K_KP5, _x.K_BACKQUOTE, _x.K_KP7, _x.K_KP0, _x.K_KP1, _x.K_KP2, _x.K_KP3,) = _get_struct_136B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_136B = None
def _get_struct_136B():
    global _struct_136B
    if _struct_136B is None:
        _struct_136B = struct.Struct("<136B")
    return _struct_136B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
