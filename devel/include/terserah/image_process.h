// Generated by gencpp from file terserah/image_process.msg
// DO NOT EDIT!


#ifndef TERSERAH_MESSAGE_IMAGE_PROCESS_H
#define TERSERAH_MESSAGE_IMAGE_PROCESS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace terserah
{
template <class ContainerAllocator>
struct image_process_
{
  typedef image_process_<ContainerAllocator> Type;

  image_process_()
    : state_x(0)
    , state_y(0)
    , setpoint_x(0)
    , setpoint_y(0)  {
    }
  image_process_(const ContainerAllocator& _alloc)
    : state_x(0)
    , state_y(0)
    , setpoint_x(0)
    , setpoint_y(0)  {
  (void)_alloc;
    }



   typedef int16_t _state_x_type;
  _state_x_type state_x;

   typedef int16_t _state_y_type;
  _state_y_type state_y;

   typedef int16_t _setpoint_x_type;
  _setpoint_x_type setpoint_x;

   typedef int16_t _setpoint_y_type;
  _setpoint_y_type setpoint_y;





  typedef boost::shared_ptr< ::terserah::image_process_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::terserah::image_process_<ContainerAllocator> const> ConstPtr;

}; // struct image_process_

typedef ::terserah::image_process_<std::allocator<void> > image_process;

typedef boost::shared_ptr< ::terserah::image_process > image_processPtr;
typedef boost::shared_ptr< ::terserah::image_process const> image_processConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::terserah::image_process_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::terserah::image_process_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::terserah::image_process_<ContainerAllocator1> & lhs, const ::terserah::image_process_<ContainerAllocator2> & rhs)
{
  return lhs.state_x == rhs.state_x &&
    lhs.state_y == rhs.state_y &&
    lhs.setpoint_x == rhs.setpoint_x &&
    lhs.setpoint_y == rhs.setpoint_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::terserah::image_process_<ContainerAllocator1> & lhs, const ::terserah::image_process_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace terserah

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::terserah::image_process_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::terserah::image_process_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::terserah::image_process_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::terserah::image_process_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::terserah::image_process_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::terserah::image_process_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::terserah::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f69305b82043f59043d1abfae232202";
  }

  static const char* value(const ::terserah::image_process_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f69305b82043f59ULL;
  static const uint64_t static_value2 = 0x043d1abfae232202ULL;
};

template<class ContainerAllocator>
struct DataType< ::terserah::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "terserah/image_process";
  }

  static const char* value(const ::terserah::image_process_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::terserah::image_process_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 state_x\n"
"int16 state_y\n"
"int16 setpoint_x\n"
"int16 setpoint_y\n"
;
  }

  static const char* value(const ::terserah::image_process_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::terserah::image_process_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_x);
      stream.next(m.state_y);
      stream.next(m.setpoint_x);
      stream.next(m.setpoint_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_process_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::terserah::image_process_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::terserah::image_process_<ContainerAllocator>& v)
  {
    s << indent << "state_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state_x);
    s << indent << "state_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state_y);
    s << indent << "setpoint_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.setpoint_x);
    s << indent << "setpoint_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.setpoint_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TERSERAH_MESSAGE_IMAGE_PROCESS_H
