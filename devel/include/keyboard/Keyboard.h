// Generated by gencpp from file keyboard/Keyboard.msg
// DO NOT EDIT!


#ifndef KEYBOARD_MESSAGE_KEYBOARD_H
#define KEYBOARD_MESSAGE_KEYBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace keyboard
{
template <class ContainerAllocator>
struct Keyboard_
{
  typedef Keyboard_<ContainerAllocator> Type;

  Keyboard_()
    : header()
    , K_i(0)
    , K_h(0)
    , K_y(0)
    , K_z(0)
    , K_q(0)
    , K_p(0)
    , K_s(0)
    , K_n(0)
    , K_t(0)
    , K_w(0)
    , K_v(0)
    , K_a(0)
    , K_k(0)
    , K_j(0)
    , K_m(0)
    , K_l(0)
    , K_o(0)
    , K_c(0)
    , K_b(0)
    , K_e(0)
    , K_d(0)
    , K_g(0)
    , K_f(0)
    , K_r(0)
    , K_x(0)
    , K_u(0)  {
    }
  Keyboard_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , K_i(0)
    , K_h(0)
    , K_y(0)
    , K_z(0)
    , K_q(0)
    , K_p(0)
    , K_s(0)
    , K_n(0)
    , K_t(0)
    , K_w(0)
    , K_v(0)
    , K_a(0)
    , K_k(0)
    , K_j(0)
    , K_m(0)
    , K_l(0)
    , K_o(0)
    , K_c(0)
    , K_b(0)
    , K_e(0)
    , K_d(0)
    , K_g(0)
    , K_f(0)
    , K_r(0)
    , K_x(0)
    , K_u(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _K_i_type;
  _K_i_type K_i;

   typedef uint8_t _K_h_type;
  _K_h_type K_h;

   typedef uint8_t _K_y_type;
  _K_y_type K_y;

   typedef uint8_t _K_z_type;
  _K_z_type K_z;

   typedef uint8_t _K_q_type;
  _K_q_type K_q;

   typedef uint8_t _K_p_type;
  _K_p_type K_p;

   typedef uint8_t _K_s_type;
  _K_s_type K_s;

   typedef uint8_t _K_n_type;
  _K_n_type K_n;

   typedef uint8_t _K_t_type;
  _K_t_type K_t;

   typedef uint8_t _K_w_type;
  _K_w_type K_w;

   typedef uint8_t _K_v_type;
  _K_v_type K_v;

   typedef uint8_t _K_a_type;
  _K_a_type K_a;

   typedef uint8_t _K_k_type;
  _K_k_type K_k;

   typedef uint8_t _K_j_type;
  _K_j_type K_j;

   typedef uint8_t _K_m_type;
  _K_m_type K_m;

   typedef uint8_t _K_l_type;
  _K_l_type K_l;

   typedef uint8_t _K_o_type;
  _K_o_type K_o;

   typedef uint8_t _K_c_type;
  _K_c_type K_c;

   typedef uint8_t _K_b_type;
  _K_b_type K_b;

   typedef uint8_t _K_e_type;
  _K_e_type K_e;

   typedef uint8_t _K_d_type;
  _K_d_type K_d;

   typedef uint8_t _K_g_type;
  _K_g_type K_g;

   typedef uint8_t _K_f_type;
  _K_f_type K_f;

   typedef uint8_t _K_r_type;
  _K_r_type K_r;

   typedef uint8_t _K_x_type;
  _K_x_type K_x;

   typedef uint8_t _K_u_type;
  _K_u_type K_u;





  typedef boost::shared_ptr< ::keyboard::Keyboard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keyboard::Keyboard_<ContainerAllocator> const> ConstPtr;

}; // struct Keyboard_

typedef ::keyboard::Keyboard_<std::allocator<void> > Keyboard;

typedef boost::shared_ptr< ::keyboard::Keyboard > KeyboardPtr;
typedef boost::shared_ptr< ::keyboard::Keyboard const> KeyboardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keyboard::Keyboard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keyboard::Keyboard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::keyboard::Keyboard_<ContainerAllocator1> & lhs, const ::keyboard::Keyboard_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.K_i == rhs.K_i &&
    lhs.K_h == rhs.K_h &&
    lhs.K_y == rhs.K_y &&
    lhs.K_z == rhs.K_z &&
    lhs.K_q == rhs.K_q &&
    lhs.K_p == rhs.K_p &&
    lhs.K_s == rhs.K_s &&
    lhs.K_n == rhs.K_n &&
    lhs.K_t == rhs.K_t &&
    lhs.K_w == rhs.K_w &&
    lhs.K_v == rhs.K_v &&
    lhs.K_a == rhs.K_a &&
    lhs.K_k == rhs.K_k &&
    lhs.K_j == rhs.K_j &&
    lhs.K_m == rhs.K_m &&
    lhs.K_l == rhs.K_l &&
    lhs.K_o == rhs.K_o &&
    lhs.K_c == rhs.K_c &&
    lhs.K_b == rhs.K_b &&
    lhs.K_e == rhs.K_e &&
    lhs.K_d == rhs.K_d &&
    lhs.K_g == rhs.K_g &&
    lhs.K_f == rhs.K_f &&
    lhs.K_r == rhs.K_r &&
    lhs.K_x == rhs.K_x &&
    lhs.K_u == rhs.K_u;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::keyboard::Keyboard_<ContainerAllocator1> & lhs, const ::keyboard::Keyboard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace keyboard

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::keyboard::Keyboard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keyboard::Keyboard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keyboard::Keyboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keyboard::Keyboard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keyboard::Keyboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keyboard::Keyboard_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keyboard::Keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b60a24a70bde597cbf13b12c86ab9705";
  }

  static const char* value(const ::keyboard::Keyboard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb60a24a70bde597cULL;
  static const uint64_t static_value2 = 0xbf13b12c86ab9705ULL;
};

template<class ContainerAllocator>
struct DataType< ::keyboard::Keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keyboard/Keyboard";
  }

  static const char* value(const ::keyboard::Keyboard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keyboard::Keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 K_i\n"
"uint8 K_h\n"
"uint8 K_y\n"
"uint8 K_z\n"
"uint8 K_q\n"
"uint8 K_p\n"
"uint8 K_s\n"
"uint8 K_n\n"
"uint8 K_t\n"
"uint8 K_w\n"
"uint8 K_v\n"
"uint8 K_a\n"
"uint8 K_k\n"
"uint8 K_j\n"
"uint8 K_m\n"
"uint8 K_l\n"
"uint8 K_o\n"
"uint8 K_c\n"
"uint8 K_b\n"
"uint8 K_e\n"
"uint8 K_d\n"
"uint8 K_g\n"
"uint8 K_f\n"
"uint8 K_r\n"
"uint8 K_x\n"
"uint8 K_u\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::keyboard::Keyboard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keyboard::Keyboard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.K_i);
      stream.next(m.K_h);
      stream.next(m.K_y);
      stream.next(m.K_z);
      stream.next(m.K_q);
      stream.next(m.K_p);
      stream.next(m.K_s);
      stream.next(m.K_n);
      stream.next(m.K_t);
      stream.next(m.K_w);
      stream.next(m.K_v);
      stream.next(m.K_a);
      stream.next(m.K_k);
      stream.next(m.K_j);
      stream.next(m.K_m);
      stream.next(m.K_l);
      stream.next(m.K_o);
      stream.next(m.K_c);
      stream.next(m.K_b);
      stream.next(m.K_e);
      stream.next(m.K_d);
      stream.next(m.K_g);
      stream.next(m.K_f);
      stream.next(m.K_r);
      stream.next(m.K_x);
      stream.next(m.K_u);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Keyboard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keyboard::Keyboard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keyboard::Keyboard_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "K_i: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_i);
    s << indent << "K_h: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_h);
    s << indent << "K_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_y);
    s << indent << "K_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_z);
    s << indent << "K_q: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_q);
    s << indent << "K_p: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_p);
    s << indent << "K_s: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_s);
    s << indent << "K_n: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_n);
    s << indent << "K_t: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_t);
    s << indent << "K_w: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_w);
    s << indent << "K_v: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_v);
    s << indent << "K_a: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_a);
    s << indent << "K_k: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_k);
    s << indent << "K_j: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_j);
    s << indent << "K_m: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_m);
    s << indent << "K_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_l);
    s << indent << "K_o: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_o);
    s << indent << "K_c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_c);
    s << indent << "K_b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_b);
    s << indent << "K_e: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_e);
    s << indent << "K_d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_d);
    s << indent << "K_g: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_g);
    s << indent << "K_f: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_f);
    s << indent << "K_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_r);
    s << indent << "K_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_x);
    s << indent << "K_u: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.K_u);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KEYBOARD_MESSAGE_KEYBOARD_H
